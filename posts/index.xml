<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/posts/</link>
    <description>Recent content in Posts on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Feb 2021 15:44:59 -0500</lastBuildDate><atom:link href="https://brettapitz.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Audio Visualization</title>
      <link>https://brettapitz.github.io/posts/audiovis/</link>
      <pubDate>Fri, 12 Nov 2021 11:06:05 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/audiovis/</guid>
      <description>I&amp;rsquo;ve been meaning to delve into the Web Audio API for a while, but I didn&amp;rsquo;t know enough about Canvas to do anything interesting. Until now!
The javascript can be found here.
Edit 11/17 After experimenting a little with progressively rendering to a canvas, I added a spectrogram. I also made a few optimization tweaks to the oscilloscope, and I finally made a favicon!
Oscillocope Histogram Spectrogram    The code is mostly a standard use of the API, but I did run into one problem: the Analyser&amp;rsquo;s frequency data is linear, but human hearing is logarithmic.</description>
    </item>
    
    <item>
      <title>A Snowstorm in Canvas</title>
      <link>https://brettapitz.github.io/posts/snowstorm/</link>
      <pubDate>Thu, 11 Nov 2021 10:36:41 -0400</pubDate>
      
      <guid>https://brettapitz.github.io/posts/snowstorm/</guid>
      <description>I wanted to get to know Canvas, and I thought a simple particle effect would make a nice first project.
The particles are stored as position, speed, and size values in a fixed length pool. Whenever a particle goes offscreen, its data is reset to place it at a random position at the start. A pool simplifies things a great deal - the alternative is spawning new particles and pushing them to an array, and filtering the array every frame to remove dead particles, which is far less efficient, in both speed and memory usage.</description>
    </item>
    
    <item>
      <title>Infinite Scroll</title>
      <link>https://brettapitz.github.io/posts/infinitescroll/</link>
      <pubDate>Mon, 08 Nov 2021 08:27:55 -0400</pubDate>
      
      <guid>https://brettapitz.github.io/posts/infinitescroll/</guid>
      <description>I always thought an infinite scroll would be tricky to create, but the Intersection Observer API provided in modern JavaScript makes it a piece of cake.
The IntersectionObserver constructor is passed a callback and an (optional) options object. This creates a bounding box that can target a number of elements, and pass data about those targets into the callback function. By default, this bounding box is the viewport.
Within the callback, each target can be checked for intersection with the observer, with code executed conditionally.</description>
    </item>
    
    <item>
      <title>DnD Coin Purse</title>
      <link>https://brettapitz.github.io/posts/coinpurse/</link>
      <pubDate>Sat, 06 Nov 2021 10:44:05 -0400</pubDate>
      
      <guid>https://brettapitz.github.io/posts/coinpurse/</guid>
      <description>Just when I thought I was out, DnD pulls me back in!
This was more complicated than I expected. I wanted to make something simple that used modular math to calculate coin amounts based on some total, but making it functional meant a lot of little UI tweaks.
I originally used &amp;lsquo;+&amp;rsquo; and &amp;lsquo;-&amp;rsquo; buttons to change coin values, but realized that would be awful for large amounts, so I switched to managing exchanges in a popup window.</description>
    </item>
    
    <item>
      <title>Drop Lowest Stat Selector</title>
      <link>https://brettapitz.github.io/posts/dicestats/</link>
      <pubDate>Thu, 28 Oct 2021 07:42:30 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/dicestats/</guid>
      <description>This selector uses the 4d6 Drop Lowest method for selecting stats. Four d6 are rolled and the three highest are summed for each ability score.
The code is straightforward enough, with three levels of components.
 The dice component manages its own display based on its value prop. The stat component contains the logic for animation, randomization, and summing. The top level component just lays out the stats, and contains a button for rolling everything.</description>
    </item>
    
    <item>
      <title>Point Buy Stat Selector</title>
      <link>https://brettapitz.github.io/posts/pointbuy/</link>
      <pubDate>Wed, 27 Oct 2021 09:20:16 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/pointbuy/</guid>
      <description>Stat Selector Number Two uses a point buy system, implemented in React! In point buy, the player is given 8s in all stats, along with 27 points to allocate however they choose. Each stat level costs one point, up to level 13; levels 14 and 15 cost 2 points each. No stat can be raised above 15 - although perhaps I should make that adjustable.
I went back and forth on making the Stat component smart or dumb; all of the stat logic effects the total held in the parent component, which would be simpler if I put that logic in the parent, but I found the code much cleaner and easier to parse with the child maintaining its own logic.</description>
    </item>
    
    <item>
      <title>Drag and Drop in HTML</title>
      <link>https://brettapitz.github.io/posts/dragndrop/</link>
      <pubDate>Tue, 26 Oct 2021 06:24:30 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/dragndrop/</guid>
      <description>I&amp;rsquo;ve been catching up on Critical Role lately and wanted to make a few stat selectors. First up is the Standard Array method, where 6 predetermined values are distributed across a character&amp;rsquo;s abilities.
The drag API in HTML is a pain. It&amp;rsquo;s got a lot of boilerplate, isn&amp;rsquo;t all that intuitive, and can&amp;rsquo;t really do anything without JavaScript.
I&amp;rsquo;ve made it so that when an element is dropped, its class and innerHTML are swapped with the square it&amp;rsquo;s dropped on.</description>
    </item>
    
    <item>
      <title>Alternating Blocks</title>
      <link>https://brettapitz.github.io/posts/alternatingblocks/</link>
      <pubDate>Sun, 24 Oct 2021 09:36:21 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/alternatingblocks/</guid>
      <description>This is a simple pair of blocks that transition between 0 and 1 opacity. I came up with a few ways to do it.
First, using absolute value like this will only ever produce 0 or 1: const toggle = () = { setLeftOpacity(Math.abs(leftOpacity - 1)) setRightOpacity(Math.abs(rightOpacity - 1)) }
And second, using a swap function: const toggle = () = { let temp = leftOpacity; setLeftOpacity(rightOpacity) setRightOpacity(temp) }
And finally, there&amp;rsquo;s conditionals: const toggle = () = { setLeftOpacity(leftOpacity == 1 ?</description>
    </item>
    
    <item>
      <title>Progress Bar</title>
      <link>https://brettapitz.github.io/posts/progressbar/</link>
      <pubDate>Sat, 23 Oct 2021 08:35:27 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/progressbar/</guid>
      <description>I tried making this in JavaScript, animating with setInterval, and it was complicated and janky and bad. I&amp;rsquo;m sure a library like Velocity could get it done, but I opted for nice, simple CSS transitions.
Pressing a key sets width to 100% and background-color to green, releasing a key sets width to 0 and background-color to blue, and CSS transitions handle the rest. A select element lets you see different easings - changing the option changes the progress bar&amp;rsquo;s class, with a different &amp;lsquo;transition-timimg-function&amp;rsquo; for each class.</description>
    </item>
    
    <item>
      <title>Editable Divs</title>
      <link>https://brettapitz.github.io/posts/editablediv/</link>
      <pubDate>Fri, 22 Oct 2021 09:14:16 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/editablediv/</guid>
      <description>I got the idea creating a custom div element that can be edited by a client, and naively spent about an hour in React trying to make a component that swapped between a div and an input (or textarea, when I realized inputs couldn&amp;rsquo;t be multiline), with middling success. It worked, but it was pretty ugly; turns out matching fonts between inputs and divs is more complicated than simply matching CSS properties.</description>
    </item>
    
    <item>
      <title>Simple To-Do List</title>
      <link>https://brettapitz.github.io/posts/todolist/</link>
      <pubDate>Wed, 20 Oct 2021 12:52:07 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/todolist/</guid>
      <description>I recently starting undertaking technical interviews, and got my introduction to the famous &amp;ldquo;To-Do List&amp;rdquo; problem. I hadn&amp;rsquo;t looked into the topic before, so I muddled my way through it in my interview. Thinking back on it a day later, I realized that I had made it vastly more complicated than it needed to be, so I recreated it more cleanly. Note to future self: not every element has to be a React component!</description>
    </item>
    
    <item>
      <title>The Adapter Pattern in Rust</title>
      <link>https://brettapitz.github.io/posts/rustadapter/</link>
      <pubDate>Mon, 18 Oct 2021 08:02:59 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/rustadapter/</guid>
      <description>In object oriented languages, when an imported class needs to be altered to use a desired interface, one common approach is to use the Adapter design pattern. Typically, imported classes cannot be made to implement a new interface - implementation has to occur in the class definition. So, an instance of the imported class is stored in a new class that implements the interface.
This is possible in Rust, and sometimes it&amp;rsquo;s necessary, but there&amp;rsquo;s a more elegant, idiomatic solution.</description>
    </item>
    
    <item>
      <title>Another Simple API</title>
      <link>https://brettapitz.github.io/posts/simpleapicall2/</link>
      <pubDate>Sat, 16 Oct 2021 08:35:07 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/simpleapicall2/</guid>
      <description>Today&amp;rsquo;s code is much the same as yesterday&amp;rsquo;s. I just wanted to play with the Pokemon API a bit. This is the first time I&amp;rsquo;ve used the image-rendering CSS setting; the low-res sprites look a lot better with it set to &amp;lsquo;pixelated&amp;rsquo; for nearest-neighbor scaling. Here&amp;rsquo;s the CodePen!</description>
    </item>
    
    <item>
      <title>Baby&#39;s First API Call</title>
      <link>https://brettapitz.github.io/posts/simpleapicall/</link>
      <pubDate>Fri, 15 Oct 2021 10:58:55 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/simpleapicall/</guid>
      <description>Today I&amp;rsquo;m making a very simple asynchronous API call.
Agify takes a name as input and returns a JSON object with fields for the input name, a predicted age, and a count. Not sure what the count is - could be number of data points, number of times queried, number of people with that name and that age, etc. I couldn&amp;rsquo;t find documentation on it.
This is the easiest kind of API to use.</description>
    </item>
    
    <item>
      <title>No-JS Collapsibles</title>
      <link>https://brettapitz.github.io/posts/dropdowns/</link>
      <pubDate>Thu, 14 Oct 2021 09:08:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/dropdowns/</guid>
      <description>Some time ago, I unsuccessfully searched for a way to make collapsibles without JavaScript. I figured it out after learning the parent:hover child CSS selector syntax. Check it out.
The CSS is a little messy, mostly because I&amp;rsquo;m making three separate dropdowns with different behaviors. It&amp;rsquo;d be cleaner in most practical applications. The only gotchas I encountered were needing to specify the background color for the menus, and using white-space: nowrap on the horizontally opening menu so that the height is constant while animating.</description>
    </item>
    
    <item>
      <title>Functional JavaScript</title>
      <link>https://brettapitz.github.io/posts/functionaljs/</link>
      <pubDate>Wed, 13 Oct 2021 08:30:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/functionaljs/</guid>
      <description>I just finished a Coursera class on SML, so I&amp;rsquo;ve got functional programming on the brain. And hey! JavaScript can do some functional stuff. Let&amp;rsquo;s explore that!
Currying Functions are first-class in functional languages, meaning they can be passed to or returned from other, &amp;lsquo;higher-order&amp;rsquo; functions. Passing a function as an argument is pretty common - the array methods &amp;lsquo;map&amp;rsquo; and &amp;lsquo;reduce&amp;rsquo; are both higher-order functions that apply some provided function parameter to every element of the array.</description>
    </item>
    
    <item>
      <title>Double Hover</title>
      <link>https://brettapitz.github.io/posts/doublehover/</link>
      <pubDate>Tue, 12 Oct 2021 08:30:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/doublehover/</guid>
      <description>I love feedback on mouse hover. It&amp;rsquo;s a simple, subtle thing that adds a lot of polish to a user interface. I was browsing the Humble Store and liked how its cards have a &amp;lsquo;dual-hover&amp;rsquo; behaviour - the &amp;lsquo;Buy&amp;rsquo; button changes when the cursor enters any part of the card, and changes again when it enters the button itself. This is really easy to do, but uses some CSS syntax I wasn&amp;rsquo;t aware of.</description>
    </item>
    
    <item>
      <title>Roy G Biv</title>
      <link>https://brettapitz.github.io/posts/roygbiv/</link>
      <pubDate>Mon, 11 Oct 2021 16:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/roygbiv/</guid>
      <description>Today&amp;rsquo;s little experiment passes background-color from parent to child in React. Simple enough, although the double bracket syntax for defining styles in JSX is weird. There&amp;rsquo;s not much to this, just a random idea. Neither white nor black text was legible in every square, so I used &amp;lsquo;-webkit-text-stroke&amp;rsquo; in CSS for an outline. Remember: white text with a black outline is easy to read against any background! Here&amp;rsquo;s the JS: const Block = ({val, color}) =&amp;gt; { return ( &amp;lt;div className=&amp;#34;color_block&amp;#34; style={{backgroundColor: color}}&amp;gt;{val}&amp;lt;/div&amp;gt; ) } const Rainbow = () =&amp;gt; { return ( &amp;lt;div id=&amp;#39;rainbow&amp;#39;&amp;gt; &amp;lt;Block val=&amp;#39;R&amp;#39; color=&amp;#39;#ff0000&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;O&amp;#39; color=&amp;#39;#ff7700&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;Y&amp;#39; color=&amp;#39;#ffff00&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;G&amp;#39; color=&amp;#39;#00cc00&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;B&amp;#39; color=&amp;#39;#0077cc&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;I&amp;#39; color=&amp;#39;#5500aa&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;V&amp;#39; color=&amp;#39;#770077&amp;#39;/&amp;gt; &amp;lt;/div&amp;gt; ) } ReactDOM.</description>
    </item>
    
    <item>
      <title>Reactulator</title>
      <link>https://brettapitz.github.io/posts/calculator/</link>
      <pubDate>Sun, 10 Oct 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/calculator/</guid>
      <description>I&amp;rsquo;ve been feeling a bit rusty lately, so I&amp;rsquo;d like to start making a little project and posting it here every day. Today&amp;rsquo;s thing is a simple calculator!
 You can play with the code here.
I originally put this together in basic JavaScript, which I found quite pleasant to write, but quite ugly to look at later, so I remade it in React. The core of the design is a simple state machine: the calculator is either collecting its first (or left) input, awaiting its second (right) input after an operator is pressed, collecting its right input, or displaying the result (which is stored in &amp;lsquo;left&amp;rsquo;) after pressing &amp;lsquo;=&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Data-Oriented Design Patterns: Command</title>
      <link>https://brettapitz.github.io/posts/dod-patterns-command/</link>
      <pubDate>Sat, 03 Apr 2021 12:00:00 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/dod-patterns-command/</guid>
      <description>I&amp;rsquo;ve been reading Richard Fabian&amp;rsquo;s Data-Oriented Design book lately, and wanted to try applying some of its concepts to a common gamedev problem often solved using the Command design pattern. I will readily admit that I&amp;rsquo;m probably misunderstanding some things and misapplying techniques, and maybe writing what professionals will consider very ugly code, but I&amp;rsquo;ll risk embarrassing myself to share what I&amp;rsquo;ve been up to.
The problem I chose to tackle is a (very) simple input handler.</description>
    </item>
    
    <item>
      <title>Translating GAS to NASM, part 4</title>
      <link>https://brettapitz.github.io/posts/groundup4/</link>
      <pubDate>Mon, 29 Mar 2021 12:33:46 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/groundup4/</guid>
      <description>This chapter was a project. Not only was there far more code than any previous chapter, but I also put off learning make until I was nearly finished, so I spent a whooooole lot of time re-assembling and re-linking. For anyone similarly ignorant of the wonders of makefiles, you can grab mine here (or learn about them here). Store the makefile in the same directory as your ASM files and enter make in your terminal to handle all your assembling and linking.</description>
    </item>
    
    <item>
      <title>Lights Out</title>
      <link>https://brettapitz.github.io/posts/lightsout/</link>
      <pubDate>Thu, 18 Mar 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/lightsout/</guid>
      <description>As a kid, I had a handheld version of this game made by Tiger. For my siblings and me, it was neat distraction for a few weeks. Now, with some help from Blender and React, I can make it myself!
Clearly, it&amp;rsquo;s not finished yet. I just wanted to put up my progress with it after a few hours. Getting React and JSX to play nicely with Hugo wasn&amp;rsquo;t much trouble, and the game&amp;rsquo;s logic is pretty straightforward.</description>
    </item>
    
    <item>
      <title>Plotting Pokemon Stats</title>
      <link>https://brettapitz.github.io/posts/pokemon_scatter/</link>
      <pubDate>Tue, 09 Mar 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/pokemon_scatter/</guid>
      <description>I made this data visualization earlier this year while studying d3.js. Just got it up and running on the new site. I&amp;rsquo;m using data from Takamasa Kato on Kaggle.
Axes are selectable, and you can hover over a point to see which Pokemon it belongs to.
 X Axis: Select    Y Axis: Select     </description>
    </item>
    
    <item>
      <title>Diving Into WebGL</title>
      <link>https://brettapitz.github.io/posts/webgl_rotating_cube/</link>
      <pubDate>Sat, 06 Mar 2021 15:38:14 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/webgl_rotating_cube/</guid>
      <description>My Lovely Rotating Cube I&amp;rsquo;ve been spending some time wrapping my head around graphics programming lately. After a week of wrestling with JavaScript in Hugo and studying WebGL and GLSL, I&amp;rsquo;ve made it all the way to a rotating, lit cube!  It doesn&amp;rsquo;t look like much, but I&amp;rsquo;ve learned a ton! Even this simple example required understanding a huge variety of concepts.
 I&amp;rsquo;m manipulating and applying matrices for coordinate system conversion, keeping matrix calculations on the CPU where possible.</description>
    </item>
    
    <item>
      <title>Translating GAS to NASM, part 3</title>
      <link>https://brettapitz.github.io/posts/groundup3/</link>
      <pubDate>Fri, 05 Mar 2021 11:23:29 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/groundup3/</guid>
      <description>Chapter 5 introduces file manipulation, which means more interaction with the operating system. All system calls changed with the move to x86_64, so whenever they come up in the book I&amp;rsquo;ll have a lot of researching and translating to do. For those of us with terrible memories, we&amp;rsquo;ve also got symbol declarations for constants now, which are only slightly different in NASM. Uninitialized data declaration syntax brings us the second appearance of NASM&amp;rsquo;s bwdqtoyz size-type suffixes, for which I made my own mnemonic: &amp;lsquo;Black and White Dairy Queen TOYZ&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Translating GAS to NASM, part 2</title>
      <link>https://brettapitz.github.io/posts/groundup2/</link>
      <pubDate>Sat, 27 Feb 2021 19:38:29 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/groundup2/</guid>
      <description>Chapter 4 covers basic functions, and there&amp;rsquo;s not a lot to go over - function syntax is very similar between GAS and NASM.
A few things to note:
 GAS uses a new syntax for indexing memory using the base pointer register: x($ebp), where x is an integer number of bytes away from the pointer. NASM uses the same syntax as the previous chapter, with rbp used in pointer math in square brackets.</description>
    </item>
    
    <item>
      <title>Translating GAS to NASM, part 1</title>
      <link>https://brettapitz.github.io/posts/groundup1/</link>
      <pubDate>Mon, 15 Feb 2021 14:44:00 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/groundup1/</guid>
      <description>Programming from the Ground Up by Jonathan Bartlett is a fantastic introduction to coding in assembly, but the syntax it uses is a bit outdated. While searching for more modern standards, I had trouble finding much related to the GNU Assembler, but plenty for NASM, the Netwide Assembler, which seems to be a lot more common.
So, in the interest of keeping my studies relevant, I decided to translate the coding examples into modern 64-bit NASM.</description>
    </item>
    
    <item>
      <title>Sorting in Python</title>
      <link>https://brettapitz.github.io/posts/pythonsort/</link>
      <pubDate>Sat, 13 Feb 2021 16:07:59 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/pythonsort/</guid>
      <description>Continuing MIT&amp;rsquo;s Data Structures and Algorithms course today, with my Python code for insertion sort, merge sort, and heap sort.
In all three, I generated a list of n random integers between 0 and n, sorted the list, and then printed the first and last elements to make sure they were expected values, since printing the whole list would take forever with large values of n.
Merge sort came out on top, with heap taking ~50% longer, and insertion taking almost as long to sort 10,000 items as merge took to sort 1,000,000.</description>
    </item>
    
    <item>
      <title>Document Distance Optimization</title>
      <link>https://brettapitz.github.io/posts/docdistance/</link>
      <pubDate>Sat, 13 Feb 2021 13:03:08 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/docdistance/</guid>
      <description>One of the first assignments in MIT&amp;rsquo;s Data Structures and Algorithms course on OpenCourseWare is analyzing the evolution of a document distance program across eight iterations. You can download the .py files here, in the Lecture Notes ZIP for Lecture 2.
I&amp;rsquo;ll be using these variables, and looking at the code function by function. Number of Wordsn Number of LinesL Number of Charactersc Number of Unique Wordsu Average Words per Linew  read_file() The only change made to this function is a switch in v8 from readlines(), which returns a list with every line in the file represented as a separate string, to read(), which returns the entire file as a single string.</description>
    </item>
    
  </channel>
</rss>
