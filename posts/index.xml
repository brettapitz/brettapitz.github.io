<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/posts/</link>
    <description>Recent content in Posts on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Feb 2021 15:44:59 -0500</lastBuildDate><atom:link href="https://brettapitz.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React Test</title>
      <link>https://brettapitz.github.io/posts/lightsout/</link>
      <pubDate>Thu, 18 Mar 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/lightsout/</guid>
      <description>As a kid, I had a handheld version of this game made by Tiger. For my siblings and me, it was neat distraction for a few weeks. Now, with some help from Blender and React, I can make it myself!
Clearly, it&amp;rsquo;s not finished yet. I just wanted to put up my progress with it after a few hours. Getting React and JSX to play nicely with Hugo wasn&amp;rsquo;t much trouble, and the game&amp;rsquo;s logic is pretty straightforward.</description>
    </item>
    
    <item>
      <title>Plotting Pokemon Stats</title>
      <link>https://brettapitz.github.io/posts/pokemon_scatter/</link>
      <pubDate>Tue, 09 Mar 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/pokemon_scatter/</guid>
      <description>I made this data visualization earlier this year while studying d3.js. Just got it up and running on the new site. I&amp;rsquo;m using data from Takamasa Kato on Kaggle.
Axes are selectable, and you can hover over a point to see which Pokemon it belongs to.
 X Axis: Select    Y Axis: Select     </description>
    </item>
    
    <item>
      <title>Diving Into WebGL</title>
      <link>https://brettapitz.github.io/posts/webgl_rotating_cube/</link>
      <pubDate>Sat, 06 Mar 2021 15:38:14 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/webgl_rotating_cube/</guid>
      <description>My Lovely Rotating Cube I&amp;rsquo;ve been spending some time wrapping my head around graphics programming lately. After a week of wrestling with JavaScript in Hugo and studying WebGL and GLSL, I&amp;rsquo;ve made it all the way to a rotating, lit cube!  It doesn&amp;rsquo;t look like much, but I&amp;rsquo;ve learned a ton! Even this simple example required understanding a huge variety of concepts.
 I&amp;rsquo;m manipulating and applying matrices for coordinate system conversion, keeping matrix calculations on the CPU where possible.</description>
    </item>
    
    <item>
      <title>Translating GAS to NASM, part 3</title>
      <link>https://brettapitz.github.io/posts/groundup3/</link>
      <pubDate>Fri, 05 Mar 2021 11:23:29 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/groundup3/</guid>
      <description>Chapter 5 introduces file manipulation, which means more interaction with the operating system. All system calls changed with the move to x86_64, so whenever they come up in the book I&amp;rsquo;ll have a lot of researching and translating to do. For those of us with terrible memories, we&amp;rsquo;ve also got symbol declarations for constants now, which are only slightly different in NASM. Uninitialized data declaration syntax brings us the second appearance of NASM&amp;rsquo;s bwdqtoyz size-type suffixes, for which I made my own mnemonic: &amp;lsquo;Black and White Dairy Queen TOYZ&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Translating GAS to NASM, part 2</title>
      <link>https://brettapitz.github.io/posts/groundup2/</link>
      <pubDate>Sat, 27 Feb 2021 19:38:29 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/groundup2/</guid>
      <description>Chapter 4 covers basic functions, and there&amp;rsquo;s not a lot to go over - function syntax is very similar between GAS and NASM.
A few things to note:
 GAS uses a new syntax for indexing memory using the base pointer register: x($ebp), where x is an integer number of bytes away from the pointer. NASM uses the same syntax as the previous chapter, with rbp used in pointer math in square brackets.</description>
    </item>
    
    <item>
      <title>Translating GAS to NASM, part 1</title>
      <link>https://brettapitz.github.io/posts/groundup1/</link>
      <pubDate>Mon, 15 Feb 2021 14:44:00 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/groundup1/</guid>
      <description>Programming from the Ground Up by Jonathan Bartlett is a fantastic introduction to coding in assembly, but the syntax it uses is a bit outdated. While searching for more modern standards, I had trouble finding much related to the GNU Assembler, but plenty for NASM, the Netwide Assembler, which seems to be a lot more common.
So, in the interest of keeping my studies relevant, I decided to translate the coding examples into modern 64-bit NASM.</description>
    </item>
    
    <item>
      <title>Sorting in Python</title>
      <link>https://brettapitz.github.io/posts/pythonsort/</link>
      <pubDate>Sat, 13 Feb 2021 16:07:59 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/pythonsort/</guid>
      <description>Continuing MIT&amp;rsquo;s Data Structures and Algorithms course today, with my Python code for insertion sort, merge sort, and heap sort.
In all three, I generated a list of n random integers between 0 and n, sorted the list, and then printed the first and last elements to make sure they were expected values, since printing the whole list would take forever with large values of n.
Merge sort came out on top, with heap taking ~50% longer, and insertion taking almost as long to sort 10,000 items as merge took to sort 1,000,000.</description>
    </item>
    
    <item>
      <title>Document Distance Optimization</title>
      <link>https://brettapitz.github.io/posts/docdistance/</link>
      <pubDate>Sat, 13 Feb 2021 13:03:08 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/docdistance/</guid>
      <description>One of the first assignments in MIT&amp;rsquo;s Data Structures and Algorithms course on OpenCourseWare is analyzing the evolution of a document distance program across eight iterations. You can download the .py files here, in the Lecture Notes ZIP for Lecture 2.
I&amp;rsquo;ll be using these variables, and looking at the code function by function. Number of Wordsn Number of LinesL Number of Charactersc Number of Unique Wordsu Average Words per Linew  read_file() The only change made to this function is a switch in v8 from readlines(), which returns a list with every line in the file represented as a separate string, to read(), which returns the entire file as a single string.</description>
    </item>
    
  </channel>
</rss>
