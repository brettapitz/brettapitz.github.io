<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>canvas on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/tags/canvas/</link>
    <description>Recent content in canvas on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Nov 2021 11:06:05 -0500</lastBuildDate><atom:link href="https://brettapitz.github.io/tags/canvas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Audio Visualization</title>
      <link>https://brettapitz.github.io/posts/audiovis/</link>
      <pubDate>Fri, 12 Nov 2021 11:06:05 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/audiovis/</guid>
      <description>I&amp;rsquo;ve been meaning to delve into the Web Audio API for a while, but I didn&amp;rsquo;t know enough about Canvas to do anything interesting. Until now!
The javascript can be found here.
Edit 11/17 After experimenting a little with progressively rendering to a canvas, I added a spectrogram. I also made a few optimization tweaks to the oscilloscope, and I finally made a favicon!
Oscillocope Histogram Spectrogram    The code is mostly a standard use of the API, but I did run into one problem: the Analyser&amp;rsquo;s frequency data is linear, but human hearing is logarithmic.</description>
    </item>
    
    <item>
      <title>A Snowstorm in Canvas</title>
      <link>https://brettapitz.github.io/posts/snowstorm/</link>
      <pubDate>Thu, 11 Nov 2021 10:36:41 -0400</pubDate>
      
      <guid>https://brettapitz.github.io/posts/snowstorm/</guid>
      <description>I wanted to get to know Canvas, and I thought a simple particle effect would make a nice first project.
The particles are stored as position, speed, and size values in a fixed length pool. Whenever a particle goes offscreen, its data is reset to place it at a random position at the start. A pool simplifies things a great deal - the alternative is spawning new particles and pushing them to an array, and filtering the array every frame to remove dead particles, which is far less efficient, in both speed and memory usage.</description>
    </item>
    
  </channel>
</rss>
