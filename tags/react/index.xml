<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/tags/react/</link>
    <description>Recent content in react on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Oct 2021 07:42:30 -0500</lastBuildDate><atom:link href="https://brettapitz.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Drop Lowest Stat Selector</title>
      <link>https://brettapitz.github.io/posts/dicestats/</link>
      <pubDate>Thu, 28 Oct 2021 07:42:30 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/dicestats/</guid>
      <description>This selector uses the 4d6 Drop Lowest method for selecting stats. Four d6 are rolled and the three highest are summed for each ability score.
The code is straightforward enough, with three levels of components.
 The dice component manages its own display based on its value prop. The stat component contains the logic for animation, randomization, and summing. The top level component just lays out the stats, and contains a button for rolling everything.</description>
    </item>
    
    <item>
      <title>Point Buy Stat Selector</title>
      <link>https://brettapitz.github.io/posts/pointbuy/</link>
      <pubDate>Wed, 27 Oct 2021 09:20:16 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/pointbuy/</guid>
      <description>Stat Selector Number Two uses a point buy system, implemented in React! In point buy, the player is given 8s in all stats, along with 27 points to allocate however they choose. Each stat level costs one point, up to level 13; levels 14 and 15 cost 2 points each. No stat can be raised above 15 - although perhaps I should make that adjustable.
I went back and forth on making the Stat component smart or dumb; all of the stat logic effects the total held in the parent component, which would be simpler if I put that logic in the parent, but I found the code much cleaner and easier to parse with the child maintaining its own logic.</description>
    </item>
    
    <item>
      <title>Alternating Blocks</title>
      <link>https://brettapitz.github.io/posts/alternatingblocks/</link>
      <pubDate>Sun, 24 Oct 2021 09:36:21 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/alternatingblocks/</guid>
      <description>This is a simple pair of blocks that transition between 0 and 1 opacity. I came up with a few ways to do it.
First, using absolute value like this will only ever produce 0 or 1: const toggle = () = { setLeftOpacity(Math.abs(leftOpacity - 1)) setRightOpacity(Math.abs(rightOpacity - 1)) }
And second, using a swap function: const toggle = () = { let temp = leftOpacity; setLeftOpacity(rightOpacity) setRightOpacity(temp) }
And finally, there&amp;rsquo;s conditionals: const toggle = () = { setLeftOpacity(leftOpacity == 1 ?</description>
    </item>
    
    <item>
      <title>Simple To-Do List</title>
      <link>https://brettapitz.github.io/posts/todolist/</link>
      <pubDate>Wed, 20 Oct 2021 12:52:07 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/todolist/</guid>
      <description>I recently starting undertaking technical interviews, and got my introduction to the famous &amp;ldquo;To-Do List&amp;rdquo; problem. I hadn&amp;rsquo;t looked into the topic before, so I muddled my way through it in my interview. Thinking back on it a day later, I realized that I had made it vastly more complicated than it needed to be, so I recreated it more cleanly. Note to future self: not every element has to be a React component!</description>
    </item>
    
    <item>
      <title>Double Hover</title>
      <link>https://brettapitz.github.io/posts/doublehover/</link>
      <pubDate>Tue, 12 Oct 2021 08:30:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/doublehover/</guid>
      <description>I love feedback on mouse hover. It&amp;rsquo;s a simple, subtle thing that adds a lot of polish to a user interface. I was browsing the Humble Store and liked how its cards have a &amp;lsquo;dual-hover&amp;rsquo; behaviour - the &amp;lsquo;Buy&amp;rsquo; button changes when the cursor enters any part of the card, and changes again when it enters the button itself. This is really easy to do, but uses some CSS syntax I wasn&amp;rsquo;t aware of.</description>
    </item>
    
    <item>
      <title>Roy G Biv</title>
      <link>https://brettapitz.github.io/posts/roygbiv/</link>
      <pubDate>Mon, 11 Oct 2021 16:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/roygbiv/</guid>
      <description>Today&amp;rsquo;s little experiment passes background-color from parent to child in React. Simple enough, although the double bracket syntax for defining styles in JSX is weird. There&amp;rsquo;s not much to this, just a random idea. Neither white nor black text was legible in every square, so I used &amp;lsquo;-webkit-text-stroke&amp;rsquo; in CSS for an outline. Remember: white text with a black outline is easy to read against any background! Here&amp;rsquo;s the JS: const Block = ({val, color}) =&amp;gt; { return ( &amp;lt;div className=&amp;#34;color_block&amp;#34; style={{backgroundColor: color}}&amp;gt;{val}&amp;lt;/div&amp;gt; ) } const Rainbow = () =&amp;gt; { return ( &amp;lt;div id=&amp;#39;rainbow&amp;#39;&amp;gt; &amp;lt;Block val=&amp;#39;R&amp;#39; color=&amp;#39;#ff0000&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;O&amp;#39; color=&amp;#39;#ff7700&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;Y&amp;#39; color=&amp;#39;#ffff00&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;G&amp;#39; color=&amp;#39;#00cc00&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;B&amp;#39; color=&amp;#39;#0077cc&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;I&amp;#39; color=&amp;#39;#5500aa&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;V&amp;#39; color=&amp;#39;#770077&amp;#39;/&amp;gt; &amp;lt;/div&amp;gt; ) } ReactDOM.</description>
    </item>
    
    <item>
      <title>Reactulator</title>
      <link>https://brettapitz.github.io/posts/calculator/</link>
      <pubDate>Sun, 10 Oct 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/calculator/</guid>
      <description>I&amp;rsquo;ve been feeling a bit rusty lately, so I&amp;rsquo;d like to start making a little project and posting it here every day. Today&amp;rsquo;s thing is a simple calculator!
 You can play with the code here.
I originally put this together in basic JavaScript, which I found quite pleasant to write, but quite ugly to look at later, so I remade it in React. The core of the design is a simple state machine: the calculator is either collecting its first (or left) input, awaiting its second (right) input after an operator is pressed, collecting its right input, or displaying the result (which is stored in &amp;lsquo;left&amp;rsquo;) after pressing &amp;lsquo;=&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Lights Out</title>
      <link>https://brettapitz.github.io/posts/lightsout/</link>
      <pubDate>Thu, 18 Mar 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/lightsout/</guid>
      <description>As a kid, I had a handheld version of this game made by Tiger. For my siblings and me, it was neat distraction for a few weeks. Now, with some help from Blender and React, I can make it myself!
Clearly, it&amp;rsquo;s not finished yet. I just wanted to put up my progress with it after a few hours. Getting React and JSX to play nicely with Hugo wasn&amp;rsquo;t much trouble, and the game&amp;rsquo;s logic is pretty straightforward.</description>
    </item>
    
  </channel>
</rss>
