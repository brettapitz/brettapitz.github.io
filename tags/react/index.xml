<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/tags/react/</link>
    <description>Recent content in react on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Oct 2021 16:43:45 -0500</lastBuildDate><atom:link href="https://brettapitz.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Roy G Biv</title>
      <link>https://brettapitz.github.io/posts/roygbiv/</link>
      <pubDate>Mon, 11 Oct 2021 16:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/roygbiv/</guid>
      <description>Today&amp;rsquo;s little experiment passes background-color from parent to child in React. Simple enough, although the double bracket syntax for defining styles in JSX is weird. There&amp;rsquo;s not much to this, just a random idea. Neither white nor black text was legible in every square, so I used &amp;lsquo;-webkit-text-stroke&amp;rsquo; in CSS for an outline. Remember: white text with a black outline is easy to read against any background! Here&amp;rsquo;s the JS: const Block = ({val, color}) =&amp;gt; { return ( &amp;lt;div className=&amp;#34;color_block&amp;#34; style={{backgroundColor: color}}&amp;gt;{val}&amp;lt;/div&amp;gt; ) } const Rainbow = () =&amp;gt; { return ( &amp;lt;div id=&amp;#39;rainbow&amp;#39;&amp;gt; &amp;lt;Block val=&amp;#39;R&amp;#39; color=&amp;#39;#ff0000&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;O&amp;#39; color=&amp;#39;#ff7700&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;Y&amp;#39; color=&amp;#39;#ffff00&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;G&amp;#39; color=&amp;#39;#00cc00&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;B&amp;#39; color=&amp;#39;#0077cc&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;I&amp;#39; color=&amp;#39;#5500aa&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;V&amp;#39; color=&amp;#39;#770077&amp;#39;/&amp;gt; &amp;lt;/div&amp;gt; ) } ReactDOM.</description>
    </item>
    
    <item>
      <title>Reactulator</title>
      <link>https://brettapitz.github.io/posts/calculator/</link>
      <pubDate>Sun, 10 Oct 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/calculator/</guid>
      <description>I&amp;rsquo;ve been feeling a bit rusty lately, so I&amp;rsquo;d like to start making a little project and posting it here every day. Today&amp;rsquo;s thing is a simple calculator!
 You can play with the code here.
I originally put this together in basic JavaScript, which I found quite pleasant to write, but quite ugly to look at later, so I remade it in React. The core of the design is a simple state machine: the calculator is either collecting its first (or left) input, awaiting its second (right) input after an operator is pressed, collecting its right input, or displaying the result (which is stored in &amp;lsquo;left&amp;rsquo;) after pressing &amp;lsquo;=&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Lights Out</title>
      <link>https://brettapitz.github.io/posts/lightsout/</link>
      <pubDate>Thu, 18 Mar 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/lightsout/</guid>
      <description>As a kid, I had a handheld version of this game made by Tiger. For my siblings and me, it was neat distraction for a few weeks. Now, with some help from Blender and React, I can make it myself!
Clearly, it&amp;rsquo;s not finished yet. I just wanted to put up my progress with it after a few hours. Getting React and JSX to play nicely with Hugo wasn&amp;rsquo;t much trouble, and the game&amp;rsquo;s logic is pretty straightforward.</description>
    </item>
    
  </channel>
</rss>
