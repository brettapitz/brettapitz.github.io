<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithms on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/tags/algorithms/</link>
    <description>Recent content in algorithms on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Feb 2021 16:07:59 -0500</lastBuildDate><atom:link href="https://brettapitz.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sorting in Python</title>
      <link>https://brettapitz.github.io/posts/pythonsort/</link>
      <pubDate>Sat, 13 Feb 2021 16:07:59 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/pythonsort/</guid>
      <description>Continuing MIT&amp;rsquo;s Data Structures and Algorithms course today, with my Python code for insertion sort, merge sort, and heap sort.
In all three, I generated a list of n random integers between 0 and n, sorted the list, and then printed the first and last elements to make sure they were expected values, since printing the whole list would take forever with large values of n.
Merge sort came out on top, with heap taking ~50% longer, and insertion taking almost as long to sort 10,000 items as merge took to sort 1,000,000.</description>
    </item>
    
    <item>
      <title>Document Distance Optimization</title>
      <link>https://brettapitz.github.io/posts/docdistance/</link>
      <pubDate>Sat, 13 Feb 2021 13:03:08 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/docdistance/</guid>
      <description>One of the first assignments in MIT&amp;rsquo;s Data Structures and Algorithms course on OpenCourseWare is analyzing the evolution of a document distance program across eight iterations. You can download the .py files here, in the Lecture Notes ZIP for Lecture 2.
I&amp;rsquo;ll be using these variables, and looking at the code function by function. Number of Wordsn Number of LinesL Number of Charactersc Number of Unique Wordsu Average Words per Linew  read_file() The only change made to this function is a switch in v8 from readlines(), which returns a list with every line in the file represented as a separate string, to read(), which returns the entire file as a single string.</description>
    </item>
    
  </channel>
</rss>
