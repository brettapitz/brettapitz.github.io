<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/tags/javascript/</link>
    <description>Recent content in javascript on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Nov 2021 10:36:41 -0400</lastBuildDate><atom:link href="https://brettapitz.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Snowstorm in Canvas</title>
      <link>https://brettapitz.github.io/posts/snowstorm/</link>
      <pubDate>Thu, 11 Nov 2021 10:36:41 -0400</pubDate>
      
      <guid>https://brettapitz.github.io/posts/snowstorm/</guid>
      <description>I wanted to get to know Canvas, and I thought a simple particle effect would make a nice first project.
The particles are stored as position, speed, and size values in a fixed length pool. Whenever a particle goes offscreen, its data is reset to place it at a random position at the start. A pool simplifies things a great deal - the alternative is spawning new particles and pushing them to an array, and filtering the array every frame to remove dead particles, which is far less efficient, in both speed and memory usage.</description>
    </item>
    
    <item>
      <title>Drag and Drop in HTML</title>
      <link>https://brettapitz.github.io/posts/dragndrop/</link>
      <pubDate>Tue, 26 Oct 2021 06:24:30 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/dragndrop/</guid>
      <description>I&amp;rsquo;ve been catching up on Critical Role lately and wanted to make a few stat selectors. First up is the Standard Array method, where 6 predetermined values are distributed across a character&amp;rsquo;s abilities.
The drag API in HTML is a pain. It&amp;rsquo;s got a lot of boilerplate, isn&amp;rsquo;t all that intuitive, and can&amp;rsquo;t really do anything without JavaScript.
I&amp;rsquo;ve made it so that when an element is dropped, its class and innerHTML are swapped with the square it&amp;rsquo;s dropped on.</description>
    </item>
    
    <item>
      <title>Baby&#39;s First API Call</title>
      <link>https://brettapitz.github.io/posts/simpleapicall/</link>
      <pubDate>Fri, 15 Oct 2021 10:58:55 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/simpleapicall/</guid>
      <description>Today I&amp;rsquo;m making a very simple asynchronous API call.
Agify takes a name as input and returns a JSON object with fields for the input name, a predicted age, and a count. Not sure what the count is - could be number of data points, number of times queried, number of people with that name and that age, etc. I couldn&amp;rsquo;t find documentation on it.
This is the easiest kind of API to use.</description>
    </item>
    
    <item>
      <title>Functional JavaScript</title>
      <link>https://brettapitz.github.io/posts/functionaljs/</link>
      <pubDate>Wed, 13 Oct 2021 08:30:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/functionaljs/</guid>
      <description>I just finished a Coursera class on SML, so I&amp;rsquo;ve got functional programming on the brain. And hey! JavaScript can do some functional stuff. Let&amp;rsquo;s explore that!
Currying Functions are first-class in functional languages, meaning they can be passed to or returned from other, &amp;lsquo;higher-order&amp;rsquo; functions. Passing a function as an argument is pretty common - the array methods &amp;lsquo;map&amp;rsquo; and &amp;lsquo;reduce&amp;rsquo; are both higher-order functions that apply some provided function parameter to every element of the array.</description>
    </item>
    
  </channel>
</rss>
