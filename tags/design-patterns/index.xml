<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design patterns on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/tags/design-patterns/</link>
    <description>Recent content in design patterns on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Oct 2021 08:02:59 -0500</lastBuildDate><atom:link href="https://brettapitz.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Adapter Pattern in Rust</title>
      <link>https://brettapitz.github.io/posts/rustadapter/</link>
      <pubDate>Mon, 18 Oct 2021 08:02:59 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/rustadapter/</guid>
      <description>In object oriented languages, when an imported class needs to be altered to use a desired interface, one common approach is to use the Adapter design pattern. Typically, imported classes cannot be made to implement a new interface - implementation has to occur in the class definition. So, an instance of the imported class is stored in a new class that implements the interface.
This is possible in Rust, and sometimes it&amp;rsquo;s necessary, but there&amp;rsquo;s a more elegant, idiomatic solution.</description>
    </item>
    
  </channel>
</rss>
