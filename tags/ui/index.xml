<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ui on Brett Apitz is Learning Stuff</title>
    <link>https://brettapitz.github.io/tags/ui/</link>
    <description>Recent content in ui on Brett Apitz is Learning Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Oct 2021 12:52:07 -0500</lastBuildDate><atom:link href="https://brettapitz.github.io/tags/ui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple To-Do List</title>
      <link>https://brettapitz.github.io/posts/todolist/</link>
      <pubDate>Wed, 20 Oct 2021 12:52:07 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/todolist/</guid>
      <description>I recently starting undertaking technical interviews, and got my introduction to the famous &amp;ldquo;To-Do List&amp;rdquo; problem. I hadn&amp;rsquo;t looked into the topic before, so I muddled my way through it in my interview. Thinking back on it a day later, I realized that I had made it vastly more complicated than it needed to be, so I recreated it more cleanly. Note to future self: not every element has to be a React component!</description>
    </item>
    
    <item>
      <title>No-JS Collapsibles</title>
      <link>https://brettapitz.github.io/posts/dropdowns/</link>
      <pubDate>Thu, 14 Oct 2021 09:08:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/dropdowns/</guid>
      <description>Some time ago, I unsuccessfully searched for a way to make collapsibles without JavaScript. I figured it out after learning the parent:hover child CSS selector syntax. Check it out.
The CSS is a little messy, mostly because I&amp;rsquo;m making three separate dropdowns with different behaviors. It&amp;rsquo;d be cleaner in most practical applications. The only gotchas I encountered were needing to specify the background color for the menus, and using white-space: nowrap on the horizontally opening menu so that the height is constant while animating.</description>
    </item>
    
    <item>
      <title>Double Hover</title>
      <link>https://brettapitz.github.io/posts/doublehover/</link>
      <pubDate>Tue, 12 Oct 2021 08:30:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/doublehover/</guid>
      <description>I love feedback on mouse hover. It&amp;rsquo;s a simple, subtle thing that adds a lot of polish to a user interface. I was browsing the Humble Store and liked how its cards have a &amp;lsquo;dual-hover&amp;rsquo; behaviour - the &amp;lsquo;Buy&amp;rsquo; button changes when the cursor enters any part of the card, and changes again when it enters the button itself. This is really easy to do, but uses some CSS syntax I wasn&amp;rsquo;t aware of.</description>
    </item>
    
    <item>
      <title>Roy G Biv</title>
      <link>https://brettapitz.github.io/posts/roygbiv/</link>
      <pubDate>Mon, 11 Oct 2021 16:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/roygbiv/</guid>
      <description>Today&amp;rsquo;s little experiment passes background-color from parent to child in React. Simple enough, although the double bracket syntax for defining styles in JSX is weird. There&amp;rsquo;s not much to this, just a random idea. Neither white nor black text was legible in every square, so I used &amp;lsquo;-webkit-text-stroke&amp;rsquo; in CSS for an outline. Remember: white text with a black outline is easy to read against any background! Here&amp;rsquo;s the JS: const Block = ({val, color}) =&amp;gt; { return ( &amp;lt;div className=&amp;#34;color_block&amp;#34; style={{backgroundColor: color}}&amp;gt;{val}&amp;lt;/div&amp;gt; ) } const Rainbow = () =&amp;gt; { return ( &amp;lt;div id=&amp;#39;rainbow&amp;#39;&amp;gt; &amp;lt;Block val=&amp;#39;R&amp;#39; color=&amp;#39;#ff0000&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;O&amp;#39; color=&amp;#39;#ff7700&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;Y&amp;#39; color=&amp;#39;#ffff00&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;G&amp;#39; color=&amp;#39;#00cc00&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;B&amp;#39; color=&amp;#39;#0077cc&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;I&amp;#39; color=&amp;#39;#5500aa&amp;#39;/&amp;gt; &amp;lt;Block val=&amp;#39;V&amp;#39; color=&amp;#39;#770077&amp;#39;/&amp;gt; &amp;lt;/div&amp;gt; ) } ReactDOM.</description>
    </item>
    
    <item>
      <title>Reactulator</title>
      <link>https://brettapitz.github.io/posts/calculator/</link>
      <pubDate>Sun, 10 Oct 2021 09:43:45 -0500</pubDate>
      
      <guid>https://brettapitz.github.io/posts/calculator/</guid>
      <description>I&amp;rsquo;ve been feeling a bit rusty lately, so I&amp;rsquo;d like to start making a little project and posting it here every day. Today&amp;rsquo;s thing is a simple calculator!
 You can play with the code here.
I originally put this together in basic JavaScript, which I found quite pleasant to write, but quite ugly to look at later, so I remade it in React. The core of the design is a simple state machine: the calculator is either collecting its first (or left) input, awaiting its second (right) input after an operator is pressed, collecting its right input, or displaying the result (which is stored in &amp;lsquo;left&amp;rsquo;) after pressing &amp;lsquo;=&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>
